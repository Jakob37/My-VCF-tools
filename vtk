#!/usr/bin/env python3

import argparse
import subprocess
import os


def main():
    args = parse_arguments()

    dirname = os.path.dirname(os.path.abspath(__file__))

    def fp(target_file):
        return os.path.join(dirname, target_file)

    if args.subcommand == "nrec":
        subprocess.run([fp("vcf_nrec"), args.vcf])
    elif args.subcommand == "rec":
        subprocess.run([fp("vcf_rec"), args.vcf])
    elif args.subcommand == "peek":
        subprocess.run([fp("vcf_peek"), args.vcf])
    elif args.subcommand == "head":
        subprocess.run([fp("vcf_head"), args.vcf, args.n])
    elif args.subcommand == "header":
        subprocess.run([fp("vcf_header"), args.vcf])
    elif args.subcommand == "sum":
        subprocess.run([fp("vcf_sum"), args.vcf])
    elif args.subcommand == "qualhist":
        subprocess.run(
            [fp("vcf_qualhist.py"), "--input", args.vcf, "--output", args.out]
        )
    elif args.subcommand == "prefix":
        subprocess.run(
            [
                fp("vcf_prefixcontigs.py"),
                "--input",
                args.vcf,
                "--prefix",
                args.prefix,
                "--output",
                args.out,
            ]
        )
    elif args.subcommand == "info":
        run_args = [fp("vcf_info"), args.vcf]
        if args.filter is not None:
            run_args.append(args.filter)
        subprocess.run(run_args)
    elif args.subcommand == "csq":
        run_args = [fp("vcf_csq"), args.vcf]
        if args.filter is not None:
            run_args.append(args.filter)
        subprocess.run(run_args)
    elif args.subcommand == "get":
        vcf = args.vcf
        if args.pattern is not None:
            pattern = args.pattern
        elif args.chr is not None:
            if args.range is not None:
                pattern = f"{args.chr}:{args.range}"
            elif args.pos is not None:
                pattern = f"{args.chr}:{args.pos}-{args.pos}"
            else:
                raise ValueError(
                    "Must specify either --range or --pos if --pattern is not used"
                )
        else:
            raise ValueError("Must specify --chr if --pattern is not used")
        print("Pattern", pattern)
        subprocess.run([fp("vcf_get"), vcf, pattern])
    else:
        raise ValueError("No known subcommand")


def parse_arguments():
    parent_parser = argparse.ArgumentParser()

    subparsers = parent_parser.add_subparsers(dest="subcommand", required=True)

    add_nrec(subparsers)
    add_rec(subparsers)
    add_peek(subparsers)
    add_head(subparsers)
    add_header(subparsers)
    add_info(subparsers)
    add_csq(subparsers)
    add_sum(subparsers)
    add_get(subparsers)
    add_qualhist(subparsers)
    add_prefix(subparsers)

    args = parent_parser.parse_args()
    return args


def add_nrec(subparsers):
    parser = subparsers.add_parser("nrec")
    parser.add_argument("vcf")


def add_rec(subparsers):
    parser = subparsers.add_parser("rec")
    parser.add_argument("vcf")


def add_peek(subparsers):
    parser = subparsers.add_parser("peek")
    parser.add_argument("vcf")


def add_head(subparsers):
    parser = subparsers.add_parser("head")
    parser.add_argument("vcf")
    parser.add_argument("-n", default="5")


def add_header(subparsers):
    parser = subparsers.add_parser("header")
    parser.add_argument("vcf")


def add_info(subparsers):
    parser = subparsers.add_parser("info")
    parser.add_argument("vcf")
    parser.add_argument("--filter", default=None)


def add_csq(subparsers):
    parser = subparsers.add_parser("csq")
    parser.add_argument("vcf")
    parser.add_argument("--filter", default=None)


def add_sum(subparsers):
    parser = subparsers.add_parser("sum")
    parser.add_argument("vcf")


def add_qualhist(subparsers):
    parser = subparsers.add_parser("qualhist")
    parser.add_argument("vcf")
    parser.add_argument("out")


def add_get(subparsers):
    parser = subparsers.add_parser("get")
    parser.add_argument("vcf")
    parser.add_argument("--chr", default=None)
    parser.add_argument("--range", help="Format: start-end", default=None)
    parser.add_argument("--pos", help="For a single position", default=None)
    parser.add_argument("--pattern", help="Format: chr:start-end", default=None)


def add_prefix(subparsers):
    parser = subparsers.add_parser("prefix")
    parser.add_argument("vcf")
    parser.add_argument("prefix")
    parser.add_argument("out")


if __name__ == "__main__":
    main()
