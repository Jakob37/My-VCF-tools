#!/usr/bin/env python3

import argparse
import subprocess
import os
from glob import glob

__version_info__ = ("1", "0", "0")
__version__ = ".".join(__version_info__)


def main():
    args = parse_arguments()

    dirname = os.path.dirname(os.path.abspath(__file__))

    def fp(target_file):
        return os.path.join(dirname, target_file)

    single_match = False
    vcfs = list()
    for vcf_arg in args.vcf:
        if os.path.isdir(vcf_arg):
            for my_file in os.listdir(vcf_arg):
                if my_file.endswith(".vcf.gz") or my_file.endswith(".vcf"):
                    dir_wo_suffix = vcf_arg.rstrip("/")
                    vcfs.append(f"{dir_wo_suffix}/{my_file}")
        else:
            for my_file in glob(vcf_arg):
                if my_file.endswith(".vcf.gz") or my_file.endswith(".vcf"):
                    vcfs.append(my_file)

        if os.path.isfile(vcf_arg) and len(args.vcf) == 1:
            single_match = True

    if args.subcommand == "nrec":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            subprocess.run([fp("vcf_nrec"), vcf])
    elif args.subcommand == "rec":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            subprocess.run([fp("vcf_rec"), vcf])
    elif args.subcommand == "peek":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            subprocess.run([fp("vcf_peek"), vcf])
    elif args.subcommand == "head":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            head_args = [fp("vcf_head"), vcf, args.n]
            if args.keephead:
                head_args.append("keephead")
            subprocess.run(head_args)
    elif args.subcommand == "header":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            subprocess.run([fp("vcf_header"), vcf])
    elif args.subcommand == "sum":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            subprocess.run([fp("vcf_sum"), vcf])
    elif args.subcommand == "qualhist":
        assert len(vcfs) == 2
        file_name = vcfs[0]
        png_out = vcfs[1]
        subprocess.run(
            [fp("vcf_qualhist.py"), "--input", file_name, "--output", png_out]
        )
    elif args.subcommand == "prefix":
        assert len(vcfs) == 3
        vcf = vcfs[0]
        prefix = vcfs[1]
        out = vcfs[2]
        subprocess.run(
            [
                fp("vcf_prefixcontigs.py"),
                "--input",
                vcf,
                "--prefix",
                prefix,
                "--output",
                out,
            ]
        )
    elif args.subcommand == "info":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            run_args = [fp("vcf_info"), vcf]
            if args.filter is not None:
                run_args.append(args.filter)
            subprocess.run(run_args)
    elif args.subcommand == "csq":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            run_args = [fp("vcf_csq"), vcf]
            if args.filter is not None:
                run_args.append(args.filter)
            subprocess.run(run_args)
    elif args.subcommand == "get":
        for vcf in vcfs:
            if not single_match:
                print(vcf)
            if args.pattern is not None:
                pattern = args.pattern
            elif args.chr is not None:
                if args.range is not None:
                    pattern = f"{args.chr}:{args.range}"
                elif args.pos is not None:
                    pattern = f"{args.chr}:{args.pos}-{args.pos}"
                else:
                    raise ValueError(
                        "Must specify either --range or --pos if --pattern is not used"
                    )
            else:
                raise ValueError("Must specify --chr if --pattern is not used")
            print("Pattern", pattern)
            subprocess.run([fp("vcf_get"), vcf, pattern])
    else:
        raise ValueError("No known subcommand")


def parse_arguments():
    parent_parser = argparse.ArgumentParser()
    parent_parser.add_argument(
        "-v", "--version", action="version", version="%(prog)s (" + __version__ + ")"
    )
    subparsers = parent_parser.add_subparsers(dest="subcommand", required=True)

    add_nrec(subparsers)
    add_rec(subparsers)
    add_peek(subparsers)
    add_head(subparsers)
    add_header(subparsers)
    add_info(subparsers)
    add_csq(subparsers)
    add_sum(subparsers)
    add_get(subparsers)
    add_qualhist(subparsers)
    add_prefix(subparsers)

    args = parent_parser.parse_args()
    return args


def add_nrec(subparsers):
    parser = subparsers.add_parser("nrec")
    parser.add_argument("vcf", nargs="*", default=".")


def add_rec(subparsers):
    parser = subparsers.add_parser("rec")
    parser.add_argument("vcf", nargs="*")


def add_peek(subparsers):
    parser = subparsers.add_parser("peek")
    parser.add_argument("vcf", nargs="*")


def add_head(subparsers):
    parser = subparsers.add_parser("head")
    parser.add_argument("vcf", nargs="*")
    parser.add_argument("-n", default="5")
    parser.add_argument("--keephead", action="store_true")


def add_header(subparsers):
    parser = subparsers.add_parser("header")
    parser.add_argument("vcf", nargs="*")


def add_info(subparsers):
    parser = subparsers.add_parser("info")
    parser.add_argument("vcf", nargs="*")
    parser.add_argument("--filter", default=None)


def add_csq(subparsers):
    parser = subparsers.add_parser("csq")
    parser.add_argument("vcf", nargs="*")
    parser.add_argument("--filter", default=None)


def add_sum(subparsers):
    parser = subparsers.add_parser("sum")
    parser.add_argument("vcf", nargs="*")


def add_qualhist(subparsers):
    parser = subparsers.add_parser("qualhist")
    parser.add_argument("vcf")
    parser.add_argument("out")


def add_get(subparsers):
    parser = subparsers.add_parser("get")
    parser.add_argument("vcf", nargs="*")
    parser.add_argument("--chr", default=None)
    parser.add_argument("--range", help="Format: start-end", default=None)
    parser.add_argument("--pos", help="For a single position", default=None)
    parser.add_argument("--pattern", help="Format: chr:start-end", default=None)


def add_prefix(subparsers):
    parser = subparsers.add_parser("prefix")
    parser.add_argument("vcf")
    parser.add_argument("prefix")
    parser.add_argument("out")


if __name__ == "__main__":
    main()
